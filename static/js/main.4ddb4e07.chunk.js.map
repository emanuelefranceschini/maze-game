{"version":3,"sources":["App.js","impact.ogg","exit.ogg","collectables.ogg","index.js"],"names":["cols","time","userX","userY","cellSize","positions","score","cells","stack","userLoc","difficulty","mode","size","App","ctx","cameraCtx","useState","modeBtns","showModeBtns","setMode","timer","setTimer","winLose","setWinLose","canvas","useRef","camera","wallSound","exitSound","collectableSound","useEffect","setup","setTimeout","current","getContext","width","height","style","left","window","innerWidth","fillStyle","fillRect","splice","length","createCells","checkRoutes","createMaze","setInterval","createUser","setCamera","createExit","createCollectibles","chooseMode","y","x","push","top","right","bottom","beenHere","some","cell","indexOf","direction","undefined","index","Math","floor","random","difference","pop","forEach","beginPath","moveTo","lineTo","strokeStyle","stroke","clearRect","userSize","arc","PI","fill","firstArea","filter","el","secondArea","thirdArea","first","second","third","controls","useCallback","e","currentCell","keyCode","play","alert","setControls","removeEventListener","addEventListener","globalCompositeOperation","maxWidth","className","ref","id","onClick","map","obj","startGame","src","impact","exit","collectables","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ddb4e07.chunk.js","sourcesContent":["import { useRef, useEffect, useState, useCallback } from 'react'\nimport impact from './impact.ogg'\nimport exit from './exit.ogg'\nimport collectables from './collectables.ogg'\n\nconst cellSize = 20\nconst userSize = 5\nlet cols, time, userX, userY\nlet positions = []\nlet score = 0\nconst cells = []\nconst stack = []\nconst userLoc = [[10, 10]]\nconst difficulty = [{time: 200, mode: 'Easy', size: 400}, {time: 100, mode: 'Medium', size: 600}, {time: 65, mode: 'Hard', size: 800}]\n\n\nconst App = () => {\n  const [modeBtns, showModeBtns] = useState(false)\n  const [mode, setMode] = useState({time: '----', mode: 'Easy', size: 400})\n  const [timer, setTimer] = useState('')\n  const [winLose, setWinLose] = useState('')\n  const canvas = useRef(null)\n  const camera = useRef(null)\n  const wallSound = useRef(null)\n  const exitSound = useRef(null)\n  const collectableSound = useRef(null)\n  let ctx, cameraCtx\n\n  useEffect(() => {\n    setup()\n    // eslint-disable-next-line\n  }, [mode])\n\n  useEffect(() => {\n    if(time > 0) {\n      time--\n      setTimeout(() => {\n        setTimer(time)}, 1000) \n    }\n      else if (time === 0) \n      { setWinLose('lose')}\n  }, [timer])\n\n\n  const setup = () => {\n    ctx = canvas.current.getContext('2d')\n    cameraCtx = camera.current.getContext('2d')\n    canvas.current.width = canvas.current.height = mode.size\n    camera.current.width = camera.current.height = mode.size\n    canvas.current.style.left = camera.current.style.left = `${(window.innerWidth - mode.size)/2}px`\n    cameraCtx.fillStyle = \"black\"\n    cameraCtx.fillRect(0, 0, mode.size, mode.size)\n    cells.splice(0, cells.length)\n    stack.splice(0, stack.length)\n    userX = 10\n    userY = 10\n    cols = canvas.current.width / cellSize\n    createCells()\n    checkRoutes()\n    createMaze()\n    setInterval(() => {\n      createUser()\n      setCamera()}, 25)\n    createExit()\n    createCollectibles()\n  }\n\n  const chooseMode = () => {\n    showModeBtns(true)\n  }\n\n\n  const createCells = () => {\n    for (let y = cellSize; y <= canvas.current.height; y += cellSize) {\n      for (let x = cellSize; x <= canvas.current.width; x += cellSize) {\n        cells.push({\n          x: x,\n          y: y,\n          top: true,\n          right: true,\n          bottom: true,\n          left: true,\n          beenHere: false,\n        })\n      }\n    }\n  }\n  \n  const checkRoutes = () => {\n    let current = cells[0]\n    cells[0].beenHere = true\n    while (cells.some((cell) => cell.beenHere === false)) {\n      let top = cells[cells.indexOf(current) - cols]\n      let right = cells[cells.indexOf(current) + 1]\n      let bottom = cells[cells.indexOf(current) + cols]\n      let left = cells[cells.indexOf(current) - 1]\n      let direction = []\n      if (top !== undefined && top.beenHere === false) direction.push(top)\n      if (\n        right !== undefined &&\n        right.beenHere === false &&\n        (cells.indexOf(current) + 1) % cols !== 0\n      )\n        direction.push(right)\n      if (bottom !== undefined && bottom.beenHere === false)\n        direction.push(bottom)\n      if (\n        left !== undefined &&\n        left.beenHere === false &&\n        cells.indexOf(current) % cols !== 0\n      )\n        direction.push(left)\n      let index = Math.floor(Math.random() * direction.length)\n      let difference = cells.indexOf(current) - cells.indexOf(direction[index])\n      if (direction.length !== 0) {\n        if (difference === 1) {\n          current.left = false\n          direction[index].right = false\n        }\n        if (difference === -1) {\n          current.right = false\n          direction[index].left = false\n        }\n        if (difference === cols) {\n          current.top = false\n          direction[index].bottom = false\n        }\n        if (difference === -cols) {\n          current.bottom = false\n          direction[index].top = false\n        }\n  \n        stack.push(current)\n        current = direction[index]\n        current.beenHere = true\n      } else {\n        stack.pop()\n        current = stack[stack.length -1]\n      }\n    }\n  }\n  \n  const createMaze = () => {\n    cells.forEach((cell) => {\n      ctx.beginPath()\n      ctx.moveTo(cell.x, cell.y)\n      cell.bottom && ctx.lineTo(cell.x - cellSize, cell.y)\n      ctx.moveTo(cell.x - cellSize, cell.y)\n      cell.left && ctx.lineTo(cell.x - cellSize, cell.y - cellSize)\n      ctx.moveTo(cell.x - cellSize, cell.y - cellSize)\n      cell.top && ctx.lineTo(cell.x, cell.y - cellSize)\n      ctx.moveTo(cell.x, cell.y - cellSize)\n      cell.right && ctx.lineTo(cell.x, cell.y)\n      ctx.strokeStyle = 'red'\n      ctx.stroke()\n    })\n  }\n  \n  const createUser = () => {\n    ctx.clearRect(userLoc[userLoc.length - 1][0] - userSize, userLoc[userLoc.length - 1][1] - userSize, userSize*2, userSize*2)\n    \n    userLoc.push([userX, userY])\n    ctx.beginPath()\n    ctx.arc(userX, userY, userSize, 0, Math.PI*2)\n    ctx.fillStyle = \"green\"\n    ctx.fill()\n  }\n  \n  const createExit = () => {\n    ctx.beginPath()\n    ctx.arc(mode.size - 10, mode.size - 10, 5, 0, Math.PI*2)\n    ctx.fillStyle = \"red\"\n    ctx.fill()\n  }\n\n  const createCollectibles = () => {\n    let firstArea = cells.filter(el => el.y >= mode.size -100 && el.x <= mode.size/2)\n    let secondArea = cells.filter(el => el.y <  mode.size -100 && el.y > 100 && el.x <= mode.size)\n    let thirdArea = cells.filter(el => el.y <= 100 && el.x >= mode.size/2)\n    let first = firstArea[Math.floor(Math.random()*firstArea.length)]\n    let second = secondArea[Math.floor(Math.random()*secondArea.length)]\n    let third = thirdArea[Math.floor(Math.random()*thirdArea.length)]\n    positions = [first, second, third]\n    positions.forEach(el => {\n      ctx.beginPath()\n      ctx.arc(el.x -10,  el.y -10, 5, 0, Math.PI*2)\n      ctx.fillStyle = \"white\"\n      ctx.fill()\n    })\n  }\n\n\n  const startGame = (size) => { \n    const mode = difficulty.filter(obj => obj.size === size)\n    showModeBtns(false)\n    setMode(...mode)\n    time = mode[0].time\n    setTimer(time)\n    setControls()\n  }\n\n\n  const controls = useCallback((e) => {\n    const [currentCell] = \n    (cells.filter(cell => userX + 10 === cell.x && userY + 10 === cell.y))\n    e.keyCode === 37 || e.keyCode === 65 ? !currentCell.left ? userX -= 20 : wallSound.current.play() :\n    e.keyCode === 38 || e.keyCode === 87 ? !currentCell.top ? userY -= 20 : wallSound.current.play() :\n    e.keyCode === 39 || e.keyCode === 68 ? !currentCell.right ? userX += 20 : wallSound.current.play() :\n    e.keyCode === 40 || e.keyCode === 83 ? !currentCell.bottom ? userY += 20 : wallSound.current.play() :\n    alert('Please use Arrow or W A S D Keys')\n    if (positions.some(el => el.x === userX + 10 && el.y === userY+10)) {\n      positions = positions.filter(el => el.x !== userX + 10 && el.y !== userY + 10)\n      collectableSound.current.play()\n      time = time + 25\n    }\n    if(userX === mode.size -10 && userY === mode.size -10) {\n      exitSound.current.play()\n      score = time\n      time = 0}\n      \n    // eslint-disable-next-line\n  },[])\n\n\n  const setControls = () => {    \n      window.removeEventListener('keydown', controls)\n      window.addEventListener('keydown', controls)\n    }\n\n    const setCamera = () => {\n      cameraCtx.globalCompositeOperation = 'source-over'\n      cameraCtx.fillStyle = \"black\"\n      cameraCtx.fillRect(0, 0, mode.size, mode.size)\n      cameraCtx.globalCompositeOperation = 'destination-out'\n      cameraCtx.beginPath()\n      cameraCtx.arc(userX, userY, userSize + 70, 0, Math.PI*2)\n      cameraCtx.fill()\n    }\n\n\n  return (\n    <>\n    <h1>Hell Maze</h1>\n    <ul style={{maxWidth: `${(window.innerWidth - mode.size)/2 - 10}px` }}>\n      <li className='time'>Time: {timer}</li>\n      <li className='score'>Score: {timer}</li>\n      <br />\n      <li className='user'>You Are The Green Dot</li>\n      <li className='exit'>Reach The Hidden Red Dot To Exit The Maze And Win</li>\n      <li className='collectables'>Collectables (+25 Time and Score) Are The White Dots</li>\n      <li>Move with Arrow or W A S D Keys</li>\n    </ul>\n      <canvas ref={canvas} id='maze'></canvas>\n      <canvas ref={camera} id='camera'></canvas>\n\n      {!modeBtns && timer === '' && <button onClick={() => chooseMode()} className='play-btn'>Play</button>}\n      {modeBtns && <div>\n        {difficulty.map((el, index) => <button key={index} onClick={()=> {startGame(el.size)}} className='mode-btn'>{el.mode}</button>)}\n      </div>}\n      {(!modeBtns && timer === 0) && <div className='endGame'>\n        <p>{winLose === 'lose' ? 'Game Over!' : 'You Win!'}</p>\n        <p>Your Score: {score}<br />Your Time: {mode.time - score + 75 - positions.length*25}</p>\n        <button onClick={() => {\n          chooseMode()\n          setup()}}>{winLose === 'lose' ? 'Try again' : 'Play Again'}</button>\n      </div>}\n      <audio ref={wallSound} src={impact}></audio>\n      <audio ref={exitSound} src={exit}></audio>\n      <audio ref={collectableSound} src={collectables}></audio>\n    </>\n  )\n}\n\nexport default App\n","export default __webpack_public_path__ + \"static/media/impact.fc2d7cbc.ogg\";","export default __webpack_public_path__ + \"static/media/exit.4f7c36d6.ogg\";","export default __webpack_public_path__ + \"static/media/collectables.be9f57f3.ogg\";","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}